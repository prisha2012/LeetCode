class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> res=new ArrayList<>();
        if(s.length()==0||words.length==0)return res;

        int wordLen = words[0].length();
        int wordCount = words.length;
        int totalLen = wordLen * wordCount;

           Map<String, Integer> map = new HashMap<>();
        for(String word : words) map.put(word, map.getOrDefault(word, 0) + 1);

        for(int i=0;i<s.length()-totalLen;i+=wordLen){
            String sub = s.substring(i, i + totalLen);
            Map<String, Integer> seen = new HashMap<>();
            for(int j = 0; j < totalLen; j += wordLen){
                 String w = sub.substring(j, j + wordLen);
                 if(!map.containsKey(w)) break;
                seen.put(w, seen.getOrDefault(w, 0) + 1);
                if(seen.get(w) > map.get(w)) break;
                
                if(j == totalLen - wordLen) res.add(i);
            }
        }
        return res;
    }
}